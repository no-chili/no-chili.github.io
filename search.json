[{"date":"2021-08-27T06:25:15.030Z","url":"/2021/08/27/Promise%E7%9A%84%E4%B8%80%E4%BA%9B%E7%89%B9%E7%82%B9/","categories":[[" ",""]],"content":"PromisePromise的一些特点 promise新建后就会立即执行 "},{"date":"2021-08-27T06:02:30.386Z","url":"/2021/08/27/async%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/","categories":[[" ",""]],"content":"async函数介绍async函数其实是generator函数的语法糖，async函数就是将generator函数的*替换成async将yield替换成awaitasync函数对generator函数的改进 async内置执行器，可以像普通函数一样执行 语义更清楚 更广的适用范围，yield后面只能跟Thunk函数或者Promise对象，await后面可以跟Promise对象也可以跟原始数据类型的值（但会自动转换成resolve的Promise对象） 返回值是Promise对象，可以用then指定下一步操作 async函数完全可以看作是多个异步操作包装成的Promise对象,而await则是内部then的语法糖语法返回的promise对象 async内部return的值会成文then的参数 内部抛出错误会导致返回的promise状态变为rejiect 内部抛出的错误还会被catch捕获 promise对象状态的改变 只有等内部所有await后面的promise执行完才会改变状态 除非遇到return或者抛出错误，async内的异步操作执行完才能执行then await命令 await后面是一个promise对象就返回该结果值 如果不是promise就直接返回对应值 定义了then方法的对象await会视为promise处理 await后面的promise变为reject状态参数会被传到async的catch 任何一个await后面的promise变为reject，async就会中断执行 如果想要继续执行可以为其单独写catch 或者放到try …catch结构里面 "},{"date":"2021-08-27T05:46:58.218Z","url":"/2021/08/27/Generator%E5%87%BD%E6%95%B0/","categories":[[" ",""]],"content":"Generator函数特征：1.function关键字与函数名之间有一个*号2.函数体内部使用yield表达式，定义不同的状态 调用与普通函数一样是在函数后面加圆括号，但不同的是Generator函数返回的是一个遍历器对象，指向内部状态的指针需要调用next方法再能执行一个分段，该分段从上个执行结束点开始，直到遇见下一个yield 与for（ of ）搭配使用"},{"title":"page","date":"2021-08-26T03:42:59.000Z","url":"/page/index.html","categories":[[" ",""]]},{"title":"friends","date":"2021-08-26T03:43:13.000Z","url":"/friends/index.html","categories":[[" ",""]]},{"title":"search","date":"2021-08-26T03:56:55.000Z","url":"/search/index.html","categories":[[" ",""]]},{"title":"tags","date":"2021-08-26T03:59:06.000Z","url":"/tags/index.html","categories":[[" ",""]]}]